// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using zMovies.Infrastructure.Data;

namespace zMovies.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200501174507_Changed_MovieRating_PK_To_Id")]
    partial class Changed_MovieRating_PK_To_Id
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("zMovies.Core.Entities.MovieCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MovieCollections");
                });

            modelBuilder.Entity("zMovies.Core.Entities.MovieCollectionItem", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("MovieCollectionId");

                    b.HasKey("MovieId", "MovieCollectionId");

                    b.HasIndex("MovieCollectionId");

                    b.ToTable("MovieCollectionItems");
                });

            modelBuilder.Entity("zMovies.Core.Entities.MovieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MovieId");

                    b.Property<int>("RatingId");

                    b.Property<string>("Review");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieRatings");
                });

            modelBuilder.Entity("zMovies.Core.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("zMovies.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("Hash");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("Salt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("zMovies.Core.Entities.MovieCollection", b =>
                {
                    b.HasOne("zMovies.Core.Entities.User", "User")
                        .WithMany("MovieCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("zMovies.Core.Entities.MovieCollectionItem", b =>
                {
                    b.HasOne("zMovies.Core.Entities.MovieCollection", "MovieCollection")
                        .WithMany("MovieCollectionItems")
                        .HasForeignKey("MovieCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("zMovies.Core.Entities.MovieRating", b =>
                {
                    b.HasOne("zMovies.Core.Entities.Rating", "Rating")
                        .WithMany("MovieRatings")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("zMovies.Core.Entities.User", "User")
                        .WithMany("MovieRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
